# Comprehensive containerized testing environment
services:
  # ==================== UNIT TESTS ====================
  
  # URL Input Service - Unit Tests
  url-input-unit-test:
    build:
      context: ./services/url-input
      dockerfile: Dockerfile
    container_name: url-input-unit-test
    environment:
      - TESTING=true
      - TEST_TYPE=unit
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - COVERAGE_FILE=/app/coverage/.coverage.url-input
    volumes:
      - ./services/url-input:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest test_url_parser.py -v --tb=short 
      --cov=. --cov-report=html:/app/coverage/url-input 
      --cov-report=xml:/app/coverage/url-input.xml 
      --junit-xml=/app/test-results/url-input-unit.xml"
    networks:
      - test_network

  # Authentication Service - Unit Tests
  auth-unit-test:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: auth-unit-test
    environment:
      - TESTING=true
      - TEST_TYPE=unit
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - COVERAGE_FILE=/app/coverage/.coverage.auth
    volumes:
      - ./services/auth:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest test_auth_detection.py -v --tb=short 
      --cov=. --cov-report=html:/app/coverage/auth 
      --cov-report=xml:/app/coverage/auth.xml 
      --junit-xml=/app/test-results/auth-unit.xml"
    networks:
      - test_network

  # Scraper Service - Unit Tests
  scraper-unit-test:
    build:
      context: ./services/scraper
      dockerfile: Dockerfile
    container_name: scraper-unit-test
    environment:
      - TESTING=true
      - TEST_TYPE=unit
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - COVERAGE_FILE=/app/coverage/.coverage.scraper
    volumes:
      - ./services/scraper:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest test_scraper.py -v --tb=short 
      --cov=. --cov-report=html:/app/coverage/scraper 
      --cov-report=xml:/app/coverage/scraper.xml 
      --junit-xml=/app/test-results/scraper-unit.xml"
    networks:
      - test_network

  # Analyzer Service - Unit Tests
  analyzer-unit-test:
    build:
      context: ./services/analyzer
      dockerfile: Dockerfile
    container_name: analyzer-unit-test
    environment:
      - TESTING=true
      - TEST_TYPE=unit
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - COVERAGE_FILE=/app/coverage/.coverage.analyzer
    volumes:
      - ./services/analyzer:/app/test_src
      - ./config:/app/config
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest test_core_components.py test_embedding_system_unit.py test_hardware_detection.py -v --tb=short 
      --cov=. --cov-report=html:/app/coverage/analyzer 
      --cov-report=xml:/app/coverage/analyzer.xml 
      --junit-xml=/app/test-results/analyzer-unit.xml"
    networks:
      - test_network

  # Clustering Service - Unit Tests
  clustering-unit-test:
    build:
      context: ./services/clustering
      dockerfile: Dockerfile
    container_name: clustering-unit-test
    environment:
      - TESTING=true
      - TEST_TYPE=unit
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - COVERAGE_FILE=/app/coverage/.coverage.clustering
    volumes:
      - ./services/clustering:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest test_hdbscan_clustering.py test_umap_dimensionality.py -v --tb=short 
      --cov=. --cov-report=html:/app/coverage/clustering 
      --cov-report=xml:/app/coverage/clustering.xml 
      --junit-xml=/app/test-results/clustering-unit.xml"
    networks:
      - test_network

  # Export Service - Unit Tests
  export-unit-test:
    build:
      context: ./services/export
      dockerfile: Dockerfile
    container_name: export-unit-test
    environment:
      - TESTING=true
      - TEST_TYPE=unit
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - COVERAGE_FILE=/app/coverage/.coverage.export
    volumes:
      - ./services/export:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
      - export_test_templates:/app/templates
    command: >
      sh -c "python -m pytest -v --tb=short -k 'not integration' 
      --cov=. --cov-report=html:/app/coverage/export 
      --cov-report=xml:/app/coverage/export.xml 
      --junit-xml=/app/test-results/export-unit.xml"
    networks:
      - test_network

  # Session Service - Unit Tests
  session-unit-test:
    build:
      context: ./services/session
      dockerfile: Dockerfile
    container_name: session-unit-test
    environment:
      - TESTING=true
      - TEST_TYPE=unit
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - COVERAGE_FILE=/app/coverage/.coverage.session
    volumes:
      - ./services/session:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest -v --tb=short -k 'not integration' 
      --cov=. --cov-report=html:/app/coverage/session 
      --cov-report=xml:/app/coverage/session.xml 
      --junit-xml=/app/test-results/session-unit.xml"
    networks:
      - test_network

  # Visualization Service - Unit Tests
  visualization-unit-test:
    build:
      context: ./services/visualization
      dockerfile: Dockerfile
    container_name: visualization-unit-test
    environment:
      - TESTING=true
      - TEST_TYPE=unit
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - COVERAGE_FILE=/app/coverage/.coverage.visualization
    volumes:
      - ./services/visualization:/app/test_src
      - ./docs:/app/docs
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest test_visualization.py test_doc_generator.py -v --tb=short 
      --cov=. --cov-report=html:/app/coverage/visualization 
      --cov-report=xml:/app/coverage/visualization.xml 
      --junit-xml=/app/test-results/visualization-unit.xml"
    networks:
      - test_network

  # Web UI - Unit Tests
  web-ui-unit-test:
    build:
      context: ./services/web-ui
      dockerfile: Dockerfile.test
    container_name: web-ui-unit-test
    environment:
      - CI=true
      - NODE_ENV=test
      - COVERAGE_FILE=/app/coverage/.coverage.web-ui
    volumes:
      - ./services/web-ui/src:/app/src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "npm test -- --coverage --watchAll=false 
      --coverageDirectory=/app/coverage/web-ui 
      --testResultsProcessor=jest-junit"
    networks:
      - test_network

  # ==================== INTEGRATION TESTS ====================
  
  # Test Qdrant for integration tests
  test-qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: test-qdrant
    ports:
      - "6333"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__LOG_LEVEL=INFO
    tmpfs:
      - /qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test_network

  # Test Ollama for integration tests
  test-ollama:
    image: ollama/ollama:latest
    container_name: test-ollama
    ports:
      - "11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
    tmpfs:
      - /root/.ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test_network

  # URL Input Service - Integration Tests
  url-input-integration-test:
    build:
      context: ./services/url-input
      dockerfile: Dockerfile
    container_name: url-input-integration-test
    environment:
      - TESTING=true
      - TEST_TYPE=integration
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
    volumes:
      - ./services/url-input:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest test_integration.py -v --tb=short 
      --junit-xml=/app/test-results/url-input-integration.xml"
    networks:
      - test_network

  # Authentication Service - Integration Tests
  auth-integration-test:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: auth-integration-test
    environment:
      - TESTING=true
      - TEST_TYPE=integration
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
    volumes:
      - ./services/auth:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest test_auth_integration.py -v --tb=short 
      --junit-xml=/app/test-results/auth-integration.xml"
    networks:
      - test_network

  # Scraper Service - Integration Tests
  scraper-integration-test:
    build:
      context: ./services/scraper
      dockerfile: Dockerfile
    container_name: scraper-integration-test
    environment:
      - TESTING=true
      - TEST_TYPE=integration
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - AUTH_SERVICE_URL=http://auth-integration-test:8082
    volumes:
      - ./services/scraper:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest test_integration.py test_auth_integration.py -v --tb=short 
      --junit-xml=/app/test-results/scraper-integration.xml"
    depends_on:
      - auth-integration-test
    networks:
      - test_network

  # Analyzer Service - Integration Tests
  analyzer-integration-test:
    build:
      context: ./services/analyzer
      dockerfile: Dockerfile
    container_name: analyzer-integration-test
    environment:
      - TESTING=true
      - TEST_TYPE=integration
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - QDRANT_URL=http://test-qdrant:6333
      - OLLAMA_URL=http://test-ollama:11434
    volumes:
      - ./services/analyzer:/app/test_src
      - ./config:/app/config
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest test_api_integration.py test_multi_model_integration.py test_model_switching.py -v --tb=short 
      --junit-xml=/app/test-results/analyzer-integration.xml"
    depends_on:
      test-qdrant:
        condition: service_healthy
      test-ollama:
        condition: service_healthy
    networks:
      - test_network

  # Clustering Service - Integration Tests
  clustering-integration-test:
    build:
      context: ./services/clustering
      dockerfile: Dockerfile
    container_name: clustering-integration-test
    environment:
      - TESTING=true
      - TEST_TYPE=integration
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - QDRANT_HOST=test-qdrant
      - QDRANT_PORT=6333
    volumes:
      - ./services/clustering:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest test_similarity_recommendations.py -v --tb=short 
      --junit-xml=/app/test-results/clustering-integration.xml"
    depends_on:
      test-qdrant:
        condition: service_healthy
    networks:
      - test_network

  # Export Service - Integration Tests
  export-integration-test:
    build:
      context: ./services/export
      dockerfile: Dockerfile
    container_name: export-integration-test
    environment:
      - TESTING=true
      - TEST_TYPE=integration
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - QDRANT_HOST=test-qdrant
      - QDRANT_PORT=6333
    volumes:
      - ./services/export:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
      - export_test_data:/app/exports
      - export_test_templates:/app/templates
    command: >
      sh -c "python -m pytest test_export_integration.py -v --tb=short 
      --junit-xml=/app/test-results/export-integration.xml"
    depends_on:
      test-qdrant:
        condition: service_healthy
    networks:
      - test_network

  # Session Service - Integration Tests
  session-integration-test:
    build:
      context: ./services/session
      dockerfile: Dockerfile
    container_name: session-integration-test
    environment:
      - TESTING=true
      - TEST_TYPE=integration
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - QDRANT_HOST=test-qdrant
      - QDRANT_PORT=6333
    volumes:
      - ./services/session:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "python -m pytest test_session_management.py -v --tb=short 
      --junit-xml=/app/test-results/session-integration.xml"
    depends_on:
      test-qdrant:
        condition: service_healthy
    networks:
      - test_network

  # API Gateway - Integration Tests
  api-gateway-integration-test:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway-integration-test
    environment:
      - TESTING=true
      - TEST_TYPE=integration
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - QDRANT_URL=http://test-qdrant:6333
      - OLLAMA_URL=http://test-ollama:11434
    volumes:
      - ./services/api-gateway:/app/test_src
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
    command: >
      sh -c "find /app -name '*.pyc' -delete && find /app -name '__pycache__' -type d -exec rm -rf {} + 2>/dev/null || true && 
      python -m pytest test_api_gateway_integration.py test_simple_integration.py -v --tb=short 
      --junit-xml=/app/test-results/api-gateway-integration.xml"
    depends_on:
      test-qdrant:
        condition: service_healthy
      test-ollama:
        condition: service_healthy
    networks:
      - test_network

  # ==================== END-TO-END TESTS ====================
  
  # E2E Test Runner
  e2e-test-runner:
    build:
      context: ./tests/e2e
      dockerfile: Dockerfile
    container_name: e2e-test-runner
    environment:
      - TESTING=true
      - TEST_TYPE=e2e
      - API_GATEWAY_URL=http://test-api-gateway:8080
      - WEB_UI_URL=http://test-web-ui:8089
    volumes:
      - ./tests/e2e:/app/tests
      - ./test-results:/app/test-results
    command: >
      sh -c "python -m pytest -v --tb=short 
      --junit-xml=/app/test-results/e2e-tests.xml"
    depends_on:
      - test-api-gateway
      - test-web-ui
    networks:
      - test_network

  # Test API Gateway for E2E
  test-api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: test-api-gateway
    ports:
      - "8080"
    environment:
      - TESTING=true
      - LOG_LEVEL=INFO
      - QDRANT_URL=http://test-qdrant:6333
      - OLLAMA_URL=http://test-ollama:11434
    depends_on:
      test-qdrant:
        condition: service_healthy
      test-ollama:
        condition: service_healthy
    networks:
      - test_network

  # Test Web UI for E2E
  test-web-ui:
    build:
      context: ./services/web-ui
      dockerfile: Dockerfile
    container_name: test-web-ui
    ports:
      - "8089"
    environment:
      - NODE_ENV=test
      - REACT_APP_API_URL=http://test-api-gateway:8080
    depends_on:
      - test-api-gateway
    networks:
      - test_network

  # ==================== PERFORMANCE & LOAD TESTS ====================
  
  # Load Testing Service
  load-test-runner:
    image: locustio/locust:latest
    container_name: load-test-runner
    ports:
      - "8089:8089"
    volumes:
      - ./tests/load:/mnt/locust
    environment:
      - LOCUST_HOST=http://test-api-gateway:8080
      - LOCUST_USERS=100
      - LOCUST_SPAWN_RATE=10
      - LOCUST_RUN_TIME=5m
    command: -f /mnt/locust/locustfile.py --headless --csv=/mnt/locust/results
    depends_on:
      - test-api-gateway
    networks:
      - test_network

  # ==================== TEST REPORTING ====================
  
  # Test Report Aggregator
  test-report-aggregator:
    image: python:3.11-slim
    container_name: test-report-aggregator
    volumes:
      - ./test-results:/app/test-results
      - ./coverage:/app/coverage
      - ./test-reports:/app/reports
    command: >
      sh -c "pip install pytest-html coverage && 
      coverage combine /app/coverage/.coverage.* && 
      coverage html -d /app/reports/coverage && 
      coverage xml -o /app/reports/coverage.xml && 
      coverage report"
    depends_on:
      - url-input-unit-test
      - auth-unit-test
      - scraper-unit-test
      - analyzer-unit-test
      - clustering-unit-test
      - export-unit-test
      - session-unit-test
      - visualization-unit-test
    networks:
      - test_network

volumes:
  export_test_data:
  export_test_templates:

networks:
  test_network:
    driver: bridge
    name: test_network